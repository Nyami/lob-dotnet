/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using lob.dotnet.Client;
using lob.dotnet.Api;
// uncomment below to import models
//using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing TemplateVersionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TemplateVersionsApiTests : IDisposable
    {
        private TemplateVersionsApi instance;

        public TemplateVersionsApiTests()
        {
            instance = new TemplateVersionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TemplateVersionsApi
        /// </summary>
        [Ignore("TODO")]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TemplateVersionsApi
            //Assert.IsType<TemplateVersionsApi>(instance);
        }

        /// <summary>
        /// Test CreateTemplateVersion
        /// </summary>
        [Ignore("TODO")]
        public void CreateTemplateVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tmplId = null;
            //TemplateVersionWritable templateVersionWritable = null;
            //var response = instance.CreateTemplateVersion(tmplId, templateVersionWritable);
            //Assert.IsType<TemplateVersion>(response);
        }

        /// <summary>
        /// Test TemplateVersionDelete
        /// </summary>
        [Ignore("TODO")]
        public void TemplateVersionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tmplId = null;
            //string vrsnId = null;
            //var response = instance.TemplateVersionDelete(tmplId, vrsnId);
            //Assert.IsType<TemplateVersionDeletion>(response);
        }

        /// <summary>
        /// Test TemplateVersionRetrieve
        /// </summary>
        [Ignore("TODO")]
        public void TemplateVersionRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tmplId = null;
            //string vrsnId = null;
            //var response = instance.TemplateVersionRetrieve(tmplId, vrsnId);
            //Assert.IsType<TemplateVersion>(response);
        }

        /// <summary>
        /// Test TemplateVersionUpdate
        /// </summary>
        [Ignore("TODO")]
        public void TemplateVersionUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tmplId = null;
            //string vrsnId = null;
            //TemplateVersionUpdatable templateVersionUpdatable = null;
            //var response = instance.TemplateVersionUpdate(tmplId, vrsnId, templateVersionUpdatable);
            //Assert.IsType<TemplateVersion>(response);
        }

        /// <summary>
        /// Test TemplateVersionsList
        /// </summary>
        [Ignore("TODO")]
        public void TemplateVersionsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tmplId = null;
            //int? limit = null;
            //string before = null;
            //string after = null;
            //List<string> include = null;
            //Dictionary<string, string> dateCreated = null;
            //var response = instance.TemplateVersionsList(tmplId, limit, before, after, include, dateCreated);
            //Assert.IsType<TemplateVersionList>(response);
        }
    }
}
